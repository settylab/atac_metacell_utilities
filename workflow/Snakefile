import os
import json

configfile: "config/config.yaml"

output_dir = config["output"]

# ---- Main Rule ---- #
rule all:
    input:
        chromvar_outdir = expand(
            "{dirname}chromvar_output/", dirname=output_dir),
        score_dir = expand("{dirname}peak_scores/", dirname=output_dir),
        gene_x_tf_dir = expand("{dirname}gene_x_tf/", dirname=output_dir)
# ---- Genome Download Rule ---- #
# Downloads hg38 GTF file.
rule dl_hg38:
    shell:
        "mkdir -p data && wget https://dp-lab-data-public.s3.amazonaws.com/SEACells-multiome/hg38.gtf -O data/hg38.gtf"

# ---- renv Rules ---- #
rule renv_install:
    input:
        libloc = config['renv_loc']
    shell:
        """
        Rscript workflow/scripts/install_renv.R {input.libloc}
        """

rule renv_init_restore:
    shell:
        """
        R -e 'renv::init(bare=TRUE)'
        R -e 'renv::restore(lockfile=\"envs/renv.lock\")'
        """

# ---- Preparation Rules ---- #

rule prepare_peak_file:
    input:
        atac = config["anndata"]["atac"],
    params:
        out_dir = output_dir
    output:
        expand("{dirname}peaks.bed", dirname=output_dir)
    conda:
        "../envs/environment.yaml"
    script:
       "scripts/prepare_peak_file.py"
    shell:
        "python {input.script} --atac={input.atac} --outdir={params.out_dir}"

rule all_seqs:
    input:
        peaks = expand("{dirname}peaks.bed", dirname=output_dir),
        script = config["scripts"] + "seq_gl.R"
    params:
        span = config["peaks"]["width"],
        genome = config["peaks"]["genome"]
    output:
        outfile = expand("{dirname}all_seqs.fa", dirname=output_dir)
    shell:
        """
        Rscript {input.script} {input.peaks} {output.outfile} {params.span} {params.genome}
        """
rule fimo:
    input:
        meme = config["peaks"]["meme_file"],
        seqs = expand("{dirname}all_seqs.fa", dirname=output_dir)
    output:
        fimo_dir = directory(
            expand("{dirname}fimo_result/", dirname=output_dir))
    log:
        out = config["logs"] + "fimo.out"
    shell:
        """
        # fimo -oc {output.fimo_dir} {input.meme} {input.seqs} 2> {log.out}
        # rm -f {output.fimo_dir}/cisml.xml

        """
# ----- Peak-TF matrix rule ---- #
# Creates a peaks X TF AnnData with FIMO scores.

## Inputs:
## peaks: Path to peaks.bed file.
## sc_atac: Path to ATAC single-cell AnnData, common obs with RNA. FIMO results will stored in atac_ad.varm. Can also be path to ATAC modality of a MuData object.
## Params:
## fimo_dir: Path to FIMO output directory.
## Outputs:
## out_dir: path to a peak_tf directory to mark completion.

rule peak_tf:
    input:
        peaks = expand("{dirname}peaks.bed", dirname=output_dir),
        sc_atac = config["anndata"]["sc_atac"],
    params:
        fimo_dir = expand("{dirname}fimo_result/", dirname=output_dir),
    conda:
        "../envs/environment.yaml"
    output:
        out_dir = directory(
            expand("{dirname}peak_tf/", dirname=output_dir))
    script:
        "scripts/peak_tf.py"

# ---- Differential accessibility ---- #
rule diff_acc:
    input:
        script = config["scripts"] + "diff_acc.R",
        pyscript = config["scripts"] + "diff_acc.py",
        metacell_script = config["scripts"] + "meta_mtx.py",
        atac = config["anndata"]["atac"],
        sc_atac = config["anndata"]["sc_atac"],
    params:
        cell_type_obs = config["peak_selection"]["cell_type_obs"],
        reference = config["peak_selection"]["reference"],
        start = config["peak_selection"]["start"]
    output:
        out_dir = directory(expand("{dirname}diff_acc/", dirname=output_dir))
    shell:
        """
        mkdir -p {output.out_dir}
        python {input.metacell_script} --atac={input.atac} --sc_atac={input.sc_atac} --cell_type_obs={params.cell_type_obs} -o={output.out_dir}
        Rscript {input.script} {output.out_dir} '{json.dumps(config)} {params.cell_type_obs}
        python {input.pyscript} --atac={input.atac} --to_compare={params.to_compare} --data_dir={output.out_dir}
        """
# ---- Gene-peak correlations ---- #

rule gp_corr:
    input:
        atac = config["anndata"]["atac"],
        rna = config["anndata"]["rna"],
        script = config["scripts"] + "gp_corr.py",
        gtf_file = expand("data/{genome}.gtf",
                          genome=config["peaks"]["genome"])
    params:
        n_jobs = config["gene_peak_corr_config"]["n_jobs"],
        test_set = config["gene_peak_corr_config"]["test_set"],
        n_genes = config["gene_peak_corr_config"]["n_genes"],
        min_corr = config["gene_peak_corr_cutoffs"]["min_corr"],
        max_pval = config["gene_peak_corr_cutoffs"]["max_pval"]

    output:
        gp_dir = directory(expand("{dirname}gp_corrs/", dirname=output_dir))
    shell:
        """
        mkdir -p {output.gp_dir}
        python {input.script} --atac={input.atac} --rna={input.rna} -o={output.gp_dir} --n_jobs={params.n_jobs} \\
            --gtf_file={input.gtf_file} {params.test_set} --n_genes={params.n_genes} --min_corr={params.min_corr} \\
            --max_pval={params.max_pval}
        """

# ---- Cell-type open peaks --- #
rule ct_open_peaks:
    input:
        sc_atac = config["anndata"]["sc_atac"],
    params:
        cell_type_obs = config["diff_acc"]["cell_type_obs"]
    output:
        out_dir = directory(
            expand("{dirname}ct_open_peaks/", dirname=output_dir))
    conda:
        "../envs/environment.yaml"
    script:
        "scripts/open_peaks.py"


# ---- Peak Selection Rule --- #
rule peak_selection:
    input:
        sc_atac = config["anndata"]["sc_atac"],
        meta_atac = config["anndata"]["atac"],
        gp_dir = expand("{dirname}gp_corrs/", dirname=output_dir),
        da_dir = expand("{dirname}diff_acc/", dirname=output_dir),
        op_dir = expand("{dirname}ct_open_peaks/", dirname=output_dir),
    params:
        target = config["peak_selection"]["target"],
        start = config["peak_selection"]["start"],
        reference = config["peak_selection"]["reference"],
        min_logFC = config["peak_selection"]["min_logFC"],
        max_logFC = config["peak_selection"]["max_logFC"],
        min_corr = config["gene_peak_corr_cutoffs"]["min_corr"],
        max_pval = config["gene_peak_corr_cutoffs"]["max_pval"]
    output:
        out_dir = directory(
            expand("{dirname}peak_selection/", dirname=output_dir))
    conda:
        "../envs/environment.yaml"
    script:
        "scripts/peak_selection.py"

# --- Weighted average scoring rule --- #

rule peak_scores:
    input:
        sc_atac = config["anndata"]["sc_atac"],
        meta_atac = config["anndata"]["atac"],
        sc_rna = config["anndata"]["sc_rna"],
        script = config["scripts"] + "primed_lin_scores.py",
        peak_selection = expand("{dirname}peak_selection/", dirname=output_dir)
    params:
        min_corr = config["gene_peak_corr_cutoffs"]["min_corr"],
        max_pval = config["gene_peak_corr_cutoffs"]["max_pval"],
        min_peaks = config["gene_peak_corr_cutoffs"]["min_peaks"],
        target = config["peak_selection"]["target"]
    output:
        out_dir = directory(expand("{dirname}peak_scores/", dirname=output_dir))
    conda:
        "../envs/environment.yaml"
    script:
        "scripts/primed_lin_scores.py"


# ---- In Silico ChIP Rules ---- #
rule compute_ins_chip:
    input:
        atac = config["anndata"]["atac"],
        rna = config["anndata"]["rna"],
        sc_atac = config["anndata"]["sc_atac"],
        script = config["scripts"] + "compute_ins_chip.py",
    params:
        verbose = config["ins_chip"]["verbose"],
    output:
        insc_dir = directory(expand("{dirname}ins_chip/", dirname=output_dir))
    shell:
        """
        mkdir -p {output.insc_dir}
        python {input.script} --atac={input.atac} --rna={input.rna} --sc_atac={input.sc_atac} -o={output.insc_dir} {params.verbose}
        touch "{output.insc_dir}/.ins_chip"
        """
rule write_ins_chip:
    input:
        atac = config["anndata"]["sc_atac"],
        rna = config["anndata"]["sc_rna"],
        script = config["scripts"] + "write_ins_chip.py",
        data_dir = output_dir + "ins_chip/",
    params:
        verbose = config["ins_chip"]["verbose"],
    shell:
        """
        python {input.script} --atac={input.atac} --rna={input.rna}  --datadir={input.data_dir}
        """
rule prep_chromvar:
    input:
        sc_atac = config["anndata"]["sc_atac"],
        ins_chip_out = expand("{dirname}ins_chip/", dirname=output_dir),
        script = config["scripts"] + "prep_chromVAR_files.py"
    params:
        min_chip = config["ins_chip"]["min_chip_score"],
        min_peak_hits = config["ins_chip"]["min_peak_hits"]
    output:
        chromvar_indir = directory(
            expand("{dirname}chromvar_input/", dirname=output_dir))
    shell:
        """
        mkdir -p {output.chromvar_indir}
        python {input.script} --sc_atac={input.sc_atac} --ins_chip_dir={input.ins_chip_out} --min_chip={params.min_chip} \\
            --min_peak_hits={params.min_peak_hits} -o={output.chromvar_indir}
        """

rule chromvar:
    input:
        sc_rna = config["anndata"]["sc_rna"],
        peak_file = expand("{dirname}peaks.bed", dirname=output_dir),
        chromvar_indir = expand(
            "{dirname}chromvar_input/", dirname=output_dir),
        script = config["scripts"] + "run_chromvar.R",
        pyscript = config["scripts"] + "run_chromvar.py"
    params:
        genome = config["peaks"]["genome"]
    output:
        chromvar_outdir = directory(
            expand("{dirname}chromvar_output/", dirname=output_dir))
    shell:
        """
        mkdir -p {output.chromvar_outdir}
        Rscript {input.script} {input.peak_file} {input.chromvar_indir} {output.chromvar_outdir} {params.genome}
        python {input.pyscript} --sc_rna {input.sc_rna} --input {output.chromvar_outdir}
        """

# ---- Computation Rule ---- #

# This rule processes single-cell ATAC-seq and RNA-seq data to identify correlations between gene expression
# and transcription factor binding activities.

## Inputs:
## sc_atac: Path to single-cell ATAC-seq AnnData. Can also be path to the ATAC-seq modality of a MuData object.
## sc_rna: Path to single-cell RNA-seq AnnData. Can also be path to the RNA-seq modality of a MuData object.
## atac: Path to processed ATAC-seq AnnData.
## ins_chip: Directory path containing insulation scores from ChIP-seq analysis.
## gp_dir: Directory path containing gene-peak correlations.
## script: Path to the Python script that computes gene-transcription factor correlations.

## Parameters:
## min_corr: Minimum correlation coefficient to consider for significance in gene-peak associations.
## max_pval: Maximum p-value to consider for gene-peak associations.
## min_peaks: Minimum number of peaks required for a gene to be considered in the analysis.

## Outputs:
## gtf_dir: Directory where the results of gene-transcription factor interaction analysis are stored.

rule gene_x_tf:
    input:
        sc_atac = config["anndata"]["sc_atac"],
        sc_rna = config["anndata"]["sc_rna"],
        atac = config["anndata"]["atac"],
        ins_chip = expand("{dirname}ins_chip/", dirname=output_dir),
        gp_dir = expand("{dirname}gp_corrs/", dirname=output_dir),
        script = config["scripts"] + "compute_gene_tf.py"
    params:
        min_corr = config["gene_peak_corr_cutoffs"]["min_corr"],
        max_pval = config["gene_peak_corr_cutoffs"]["max_pval"],
        min_peaks = config["gene_peak_corr_cutoffs"]["min_peaks"]
    output:
        gtf_dir = directory(expand("{dirname}gene_x_tf/", dirname=output_dir))
    shell:
        """
        mkdir -p {output.gtf_dir}
        python {input.script} --atac={input.atac} --sc_atac={input.sc_atac} --sc_rna={input.sc_rna}\\
         --min_corr={params.min_corr} --max_pval={params.max_pval} \\
         --min_peaks={params.min_peaks} -o={output.gtf_dir}
        """


# ---- Cleaning Rule ---- #
rule clean:
    params:
        out_dir = output_dir + "*"
    run:
        if config["interactive_clean"]:
            shell("rm -ri {params.out_dir}")
        else:
            shell("rm -r {params.out_dir}")
