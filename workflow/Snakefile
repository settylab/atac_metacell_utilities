import os

configfile: "config/config.yaml"

output_dir = config["output"]

# ---- Main Rule ---- #
rule all:
    input:
        gene_peak = expand("{dirname}gp_corrs/", dirname=output_dir),
        peak_tf = expand("{dirname}peak_x_tf.h5ad", dirname=output_dir),
        gene_tf_dir = expand("{dirname}gtf_mats/", dirname=output_dir)

# ---- Genome Download Rule ---- #

rule dl_hg38:
    shell:
        "mkdir -p data && wget https://dp-lab-data-public.s3.amazonaws.com/SEACells-multiome/hg38.gtf -O data/hg38.gtf"
        
# ---- renv Rules ---- #
rule renv_install:
    input:
        libloc = config['renv_loc']
    shell:
        """
        ml R/4.1.0-foss-2020b
        Rscript workflow/scripts/install_renv.R {input.libloc}
        """
rule renv_init_restore:
    shell:
        """
        ml R/4.1.0-foss-2020b
        R -e 'renv::init(bare=TRUE)'
        R -e 'renv::restore(lockfile=\"envs/renv.lock\")'
        """
rule renv_genome:
    params:
        genome = config["genome"]
    shell:
        """
        ml R/4.1.0-foss-2020b
        Rscript workflow/scripts/install_bsgenome.R {params.genome}
        """
# ---- Preparation Rules ---- #

rule resize_peaks:
    input:
        atac = config["atac"],
        script = config["scripts"] + "resize_peaks.py"
    params:
        width = config["width"],
        out_dir = output_dir
    output:
        expand("{dirname}peaks.bed", dirname=output_dir)
    shell:
        "python {input.script} {input.atac} --outdir={params.out_dir} --width={params.width}"
    
rule all_seqs:
    input:
        peaks = expand("{dirname}peaks.bed", dirname=output_dir),
        script = config["scripts"] + "seq_gl.R"
    params:
        span = config["width"],
        genome = config["genome"]
    output:
        outfile = expand("{dirname}all_seqs.fa", dirname=output_dir)
    shell:
        """
        ml R/4.1.0-foss-2020b
        Rscript {input.script} {input.peaks} {output.outfile} {params.span} {params.genome}
        """
rule fimo:
    input:
        meme = config["in_meme"],
        seqs = expand("{dirname}all_seqs.fa", dirname=output_dir)
    output:
        fimo_dir = directory(expand("{dirname}fimo_result/", dirname=output_dir))
    shell:
        "fimo -oc {output.fimo_dir} {input.meme} {input.seqs}"

rule peak_tf:
    input:
        fimo_dir = expand("{dirname}fimo_result/", dirname=output_dir),
        atac = config["atac"],
        peaks = expand("{dirname}peaks.bed", dirname=output_dir),
        script = config["scripts"] + "peak_tf.py"
    output:
        expand("{dirname}peak_x_tf.h5ad", dirname=output_dir) 
    shell:
        "python {input.script} {input.atac} --peak_file={input.peaks} --fimo_res={input.fimo_dir} -o=output_dir"

rule gp_corr:
    input:
        atac = config["atac"],
        rna = config["rna"],
        script = config["scripts"] + "gp_corr.py",
        gtf_file = expand("data/{genome}.gtf", genome=config["genome"])
    params:
        n_jobs = config["n_jobs"]
    output:
        gp_dir = directory(expand("{dirname}gp_corrs/", dirname=output_dir))
    run:
        shell("mkdir -p {output.gp_dir}")
        shell("python {input.script} --atac={input.atac} --rna={input.rna} -o=output.gp_dir --n_jobs={params.n_jobs} --gtf_file={input.gtf_file}") 
        
rule gene_x_tf:
    input:
        atac = config["atac"],
        rna = config["rna"],
        peak_tf = expand("{dirname}peak_x_tf.h5ad", dirname=output_dir),
        gp_dir = expand("{dirname}gp_corrs/", dirname=output_dir),
        script = config["scripts"] + "compute_gene_tf.py"
    params:
        min_corr = config["min_corr"],
        max_pval = config["max_pval"],
        min_peaks = config["min_peaks"]
    log:
        out = config["logs"] + "gtf.out"
    output:
        directory(expand("{dirname}gtf_mats/", dirname=output_dir))
    shell:
        """
        python {input.script} --atac={input.atac} --rna={input.rna} --peak_tf={input.peak_tf} \
            --gp_corr={input.gp_dir} --min_corr={params.min_corr} --max_pval={params.max_pval} \
            --min_peaks={params.min_peaks} -o=output_dir -2>log.out"
        """

# ---- Cleaning Rule ---- #
rule clean:
    shell:
        "rm -rf config['output']/*"
